scale_fill_manual(name="Entity of\ninterest",
values=c("#fee391","#fe9929", "#cc4c02"),
guide=guide_legend(override.aes =
list(shape=22,
size = 8))) +
coord_cartesian(xlim=c(0,35),ylim=c(0,35)) +
geom_text(aes(x=total_pos,y=total_neg,label = name),nudge_y=runif(17,0.25,1.25),size=5) +
geom_abline(intercept=0,slope=1) +
labs(title="Comparing measures by positivity, negativity", x="Number of participants rating the measure\nhigh on both questions", y="Number of participants rating the measure\nlow on both questions") +
#guides(col = guide_legend(override.aes = list(shape = 15, size = 8))) +
theme_bw(base_size = 18) +
theme(plot.title = element_text(hjust = 0))
scatter
ggsave("scatter.png", scatter, width=10, height=9)
measures_rank <- est_vs_imp_completed %>% group_by(name) %>% summarise(imp_pos=sum(Important == "positive"),est_pos = sum(Estimable == "positive")) %>% collect
measures_rank$imp_rank <- rank(-measures_rank$imp_pos, ties.method = "average")
measures_rank$est_rank <- rank(-measures_rank$est_pos, ties.method = "average")
measures_rank$avg_rank <- rowMeans(measures_rank[,4:5])
measure_ranks <- gather(measures_rank[,c(1,4:6)], "subgroup", "rank", 2:3)
measure_ranks$subgroup <- factor(measure_ranks$subgroup, levels=c("imp_rank","est_rank"), labels=c("Importance","Estimability"), ordered=TRUE)
ggplot(data=measure_ranks, aes(x=subgroup,y=rank,group=name, color=(factor(avg_rank<10,levels=c(TRUE,FALSE),ordered=TRUE,labels=c("Yes","No"))))) +
geom_line(size=1) +
geom_text(data=measure_ranks[measure_ranks$subgroup=="Estimability",], aes(label=name, x=2.05), hjust=0, show.legend=FALSE) +
geom_text(data=measure_ranks[measure_ranks$subgroup=="Importance",], aes(label=name, x=0.95), hjust=1, show.legend=FALSE) +
scale_x_discrete(expand=c(0,0.3)) +
scale_y_reverse(breaks=c(1,17),minor_breaks=c(1:17)) +
#geom_hline(yintercept = 9, linetype="dashed", colour="#AAAAAA") +
#geom_text(aes(x=.95,y=8.5,label="rank=9", hjust = 1), colour="#AAAAAA") +
scale_color_manual(name="Top 9 measures\nby average\npositivity rank", values=c("purple4","#999999")) +
labs(title="Which measures rank highly on both Importance and Estimability?",x="question",y="positivity rank") +
#xlim(.5,2.5) +
theme_bw(base_size = 20) +
theme(plot.title = element_text(hjust = 0))
#ggsave("rank_slope.png",width=13,height=6)
#ggsave("rank_slope.pdf",width=13,height=6)
best_with_full <- unique(measure_ranks[,1:2])
names(best_with_full) <- c("measure_name","avg_rank_full")
clusters <- read.csv("final_assignments.csv", header=TRUE, stringsAsFactors=FALSE)
measures_by_user_clust <- merge(measures_by_user_demo,clusters)
measures_by_user_clust <- dplyr::select(measures_by_user_clust, -c(group, neg, DO.Q.Q6.DisplayOrderAnalysisTools,DO.Q.Q22.DisplayOrderVisTools,DO.Q.Q9.DisplayOrderLayouts))
ggplot(measures_by_user_clust, aes(x=compiled_answer)) +
geom_bar() +
facet_grid(cluster ~ .)
measures_by_user_clust$Q4.Demo.NetworkVisualizationResearch <- factor(measures_by_user_clust$Q4.Demo.NetworkVisualizationResearch,
levels=agree4,
labels=c("Not well\nat all","Not very\nwell", "Somewhat\nwell", "Very well"),
ordered = TRUE)
ggplot(measures_by_user_clust, aes(x=Q4.Demo.NetworkVisualizationResearch)) +
geom_bar() +
facet_grid(cluster ~ .)
measures_by_user_clust$Q11.Demo.HowOftenProduceVis <-
factor(measures_by_user_clust$Q11.Demo.HowOftenProduceVis,
levels=freq5,
ordered = TRUE)
ggplot(measures_by_user_clust, aes(x=Q11.Demo.HowOftenProduceVis)) +
geom_bar() +
facet_grid(cluster ~ .)
ggplot(measures_by_user_clust) +
geom_mosaic(aes(x=product(Q11.Demo.HowOftenProduceVis,compiled_answer))) #+
#facet_grid(cluster~.)
ggplot(measures_by_user_clust) +
geom_mosaic(aes(x=product(compiled_answer, Q11.Demo.HowOftenProduceVis),
fill=compiled_answer)) +
#facet_grid(cluster~.) +
scale_fill_manual(values=c("snow4","snow3","sienna3","sienna1","skyblue2","skyblue4"),
name="") +
guides(fill = guide_legend(reverse=T))
ggplot(measures_by_user_clust) +
geom_mosaic(aes(x=product(compiled_answer, Q11.Demo.HowOftenProduceVis),
fill=compiled_answer)) +
facet_grid(cluster~.) +
scale_fill_manual(values=c("snow4","snow3","sienna3","sienna1","skyblue2","skyblue4"),
name="") +
guides(fill = guide_legend(reverse=T))
active_with_clust <- merge(est_vs_imp_completed, clusters)
clust1_rank <- active_with_clust[active_with_clust$cluster == 1,] %>% group_by(name) %>% summarise(imp_pos=sum(Important == "positive"),est_pos = sum(Estimable == "positive")) %>% collect
clust1_rank$imp_rank <- rank(-clust1_rank$imp_pos, ties.method = "average")
clust1_rank$est_rank <- rank(-clust1_rank$est_pos, ties.method = "average")
clust1_rank$avg_rank <- rowMeans(clust1_rank[,4:5])
best_with_clust1 <- clust1_rank[,c(1,6)]
names(best_with_clust1) <- c("measure_name","avg_rank_clust1")
clust2_rank <- active_with_clust[active_with_clust$cluster == 2,] %>% group_by(name) %>% summarise(imp_pos=sum(Important == "positive"),est_pos = sum(Estimable == "positive")) %>% collect
clust2_rank$imp_rank <- rank(-clust2_rank$imp_pos, ties.method = "average")
clust2_rank$est_rank <- rank(-clust2_rank$est_pos, ties.method = "average")
clust2_rank$avg_rank <- rowMeans(clust2_rank[,4:5])
best_with_clust2 <- clust2_rank[,c(1,6)]
names(best_with_clust2) <- c("measure_name","avg_rank_clust2")
clust3_rank <- active_with_clust[active_with_clust$cluster == 3,] %>% group_by(name) %>% summarise(imp_pos=sum(Important == "positive"),est_pos = sum(Estimable == "positive")) %>% collect
clust3_rank$imp_rank <- rank(-clust3_rank$imp_pos, ties.method = "average")
clust3_rank$est_rank <- rank(-clust3_rank$est_pos, ties.method = "average")
clust3_rank$avg_rank <- rowMeans(clust3_rank[,4:5])
best_with_clust3 <- clust3_rank[,c(1,6)]
names(best_with_clust3) <- c("measure_name","avg_rank_clust3")
clust4_rank <- active_with_clust[active_with_clust$cluster == 4,] %>% group_by(name) %>% summarise(imp_pos=sum(Important == "positive"),est_pos = sum(Estimable == "positive")) %>% collect
clust4_rank$imp_rank <- rank(-clust4_rank$imp_pos, ties.method = "average")
clust4_rank$est_rank <- rank(-clust4_rank$est_pos, ties.method = "average")
clust4_rank$avg_rank <- rowMeans(clust4_rank[,4:5])
best_with_clust4 <- clust4_rank[,c(1,6)]
names(best_with_clust4) <- c("measure_name","avg_rank_clust4")
all_bests <- full_join(best_with_full, best_with_clust1)
all_bests <- full_join(all_bests, best_with_clust2)
all_bests <- full_join(all_bests, best_with_clust3)
all_bests <- full_join(all_bests, best_with_clust4)
all_bests$cluster_votes <- rowSums(all_bests[,3:6] < 10)
all_bests$cluster_mean <- rowMeans(all_bests[,3:6], na.rm=TRUE)
#all_bests <- as.data.frame(all_bests)
all_bests$level <- ifelse(all_bests$measure_name %in% c("EigenvectorCentrality","ClosenessCentrality","NodeBC","NodeDegree","Loops","LinkBC"),"Element",ifelse(all_bests$measure_name %in% c("AvgShortestPath","AvgPathLength","Diameter","ClusteringCoeff","Density","NumLinks","AvgDegree","NumNodes"),"Graph",ifelse(all_bests$measure_name %in% c("Modularity","ComponentSize","NumComponents"),"Cluster","Other")))
# Factorize and order the level column.
all_bests$level <- factor(all_bests$level,levels=c("Element","Cluster","Graph"),ordered=TRUE)
#write.csv(all_bests, file = "measures_by_cluster.csv", row.names = FALSE)
ggparcoord(data = all_bests[all_bests$cluster_mean < 10,], columns = c(3:6), groupColumn = "level", order = "anyClass", scale = "globalminmax") +
#geom_text(aes(label=labels(measure_name))) +
scale_y_reverse() +
scale_x_discrete(labels=c("1","3","2","4")) +
scale_color_discrete(name="Measure Level") +
labs(x="Cluster",y="Rank") +
theme_bw()
# TO DO:
# label parallel coords
# use smart subsetting to test the ranking?  or just try again to get ranking working with random subsetting?
# look for explanations for clusters
# Start over again with the tall dataset, before the first aggregation.  For this aggregation, group by user and measure again, but this time convert the Likert responses to numerical values -- 1 for Very unimportant, 4 for Very important, -99 for skipped.  Do for both importance and estimability.
measures_by_user_quad <- measures_by_user_imp[,-c(2,6)]
measures_by_user_quad$coded_answer <- ifelse(measures_by_user_quad$compiled_answer == "Unfamiliar", 0, ifelse(measures_by_user_quad$compiled_answer == "Skipped", -99, ifelse(measures_by_user_quad$compiled_answer == "Very low", 1, ifelse(measures_by_user_quad$compiled_answer == "Somewhat low", 2, ifelse(measures_by_user_quad$compiled_answer == "Somewhat high", 3, ifelse(measures_by_user_quad$compiled_answer == "Very high", 4, "Error"))))))
# Note: est_score and imp_score fairly highly correlated
#cor(measures_by_user_quad$imp_score,measures_by_user_quad$est_score)
#####   result: 0.7930693
# Aggregate to the individual measures by averaging numerical Likert responses, filtering out measures marked as unfamiliar or measures that had been skipped.  Keep track of number of users responding for each measure.
# output measures_by_user_quad for additional stats; necessary for logit?
#write.csv(measures_by_user_quad, file = "measures_by_user_quad.csv")
measures_quad <- measures_by_user_quad %>% filter(coded_answer > 0) %>% group_by(name, subgroup) %>% summarise(avg_score=mean(as.numeric(coded_answer))) %>% collect
# Add the level of analysis for each measure.
measures_quad$level <- ifelse(measures_quad$name %in% c("EigenvectorCentrality","ClosenessCentrality","NodeBC","NodeDegree","Loops","LinkBC"),"Element",ifelse(measures_quad$name %in% c("AvgShortestPath","AvgPathLength","Diameter","ClusteringCoeff","Density","NumLinks","AvgDegree","NumNodes"),"Graph",ifelse(measures_quad$name %in% c("Modularity","ComponentSize","NumComponents"),"Cluster","Other")))
# Factorize and order the level column.
measures_quad$level <- factor(measures_quad$level,levels=c("Element","Cluster","Graph"),ordered=TRUE)
measures_quad_spread <- spread(measures_quad, subgroup, avg_score)
scatter_quad <- ggplot(measures_quad_spread) +
geom_point(aes(x=Important,y=Estimable,color=level),alpha=0.8,size=5) +
coord_cartesian(xlim=c(2,3.75),ylim=c(1.5,3.5)) +
geom_text(aes(x=Important,y=Estimable,label = name),nudge_y=-0.05,size=3) +
geom_vline(xintercept=mean(as.numeric(measures_quad_spread$Important))) +
geom_hline(yintercept=mean(as.numeric(measures_quad_spread$Estimable))) +
theme_bw()
scatter_quad
# Select the "Other" responses for Analysis and Vis Tools
meas_other <- filter(DF_other_3,(subgroup=="Important" | subgroup=="Estimable"))
meas_other$prelim_name <- tolower(meas_other$prelim_name)
meas_other$prelim_name <- factor(meas_other$prelim_name,
levels=names(sort(table(meas_other$prelim_name))),
ordered=TRUE)
meas_other$subgroup <- factor(meas_other$subgroup,
levels=c("Important","Estimable"),
ordered=TRUE)
meas_other_plot <- ggplot(filter(meas_other,prelim_name != "other (blank)")) +
geom_bar(aes(x=prelim_name),fill="purple4") +
facet_grid(.~subgroup) +
coord_flip() +
labs(#title="Generalized tools like SPSS, Stata, and Matlab\nare mentioned regularly in the 'Other' field.",
x="Other measures",
y="Number of participants") +
scale_y_continuous(minor_breaks=NULL) +
#scale_x_discrete(drop=FALSE) +
theme_bw() +
theme(panel.grid.major.y = element_blank(),
panel.grid.major.x = element_line(size=.1, color="grey"),
plot.title = element_text(hjust = 0, size=22)
)
meas_other_plot
meas_other$compiled_answer <- ifelse((meas_other$compiled_answer == "Very unlikely" | meas_other$compiled_answer == "Very unimportant"), "Very low", ifelse((meas_other$compiled_answer == "Somewhat unlikely" | meas_other$compiled_answer == "Somewhat unimportant"), "Somewhat low", ifelse((meas_other$compiled_answer == "Somewhat likely" | meas_other$compiled_answer == "Somewhat important"), "Somewhat high", ifelse((meas_other$compiled_answer == "Very likely" | meas_other$compiled_answer == "Very important"), "Very high", meas_other$compiled_answer))))
meas_other$compiled_answer <- factor(meas_other$compiled_answer,
levels=c("Skipped",
"Unfamiliar",
"Very low",
"Somewhat low",
"Somewhat high",
"Very high"),
ordered=TRUE)
ggplot(filter(meas_other,prelim_name != "other (blank)")) +
geom_bar(aes(x=prelim_name, fill=compiled_answer)) +
facet_grid(.~subgroup) +
coord_flip() +
scale_fill_manual(values=c("Skipped" = "snow4", "Unfamiliar" = "snow3", "Very low" = "sienna3", "Somewhat low" = "sienna1", "Somewhat high" = "skyblue2", "Very high" = "skyblue4"),
name="")  +
labs(#title="Partipicants rated simpler metrics at the\nnode and graph level most important.",
x="Network measure",
y="Number of participants") +
theme_bw() +
theme(legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
plot.title = element_text(hjust = 0, size=22)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
# use same process as tools, importance/estimability ratings; could maybe have done the compiled_answer factor just once on answers_by_user? also the neg column?
measures_by_user_layout <- filter(answers_by_user, (group=="Layouts"))
measures_by_user_layout$neg <- ifelse((measures_by_user_layout$compiled_answer == "Often" | measures_by_user_layout$compiled_answer == "Almost always/always"), 0, 1)
measures_by_user_layout$name <- factor(measures_by_user_layout$name, levels=names(sort(table(measures_by_user_layout$name[measures_by_user_layout$neg == 1]),decreasing=TRUE)))
measures_by_user_layout$compiled_answer <- factor(measures_by_user_layout$compiled_answer,
levels=c("Skipped",
"Unfamiliar",
"Never/almost never",
"Seldom/rarely",
"Often",
"Almost always/always"
),
ordered=TRUE)
ggplot(measures_by_user_layout) +
geom_bar(aes(x=name, fill=compiled_answer),position = position_stack(reverse = TRUE)) +
coord_flip() +
scale_fill_manual(values=c("snow4","snow3","tan3","tan1","turquoise2","turquoise4"),
name="")  +
labs(#title="Layout title.",
x="",
y="Number of participants") +
theme_bw() +
theme(legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
plot.title = element_text(hjust = 0, size=22)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
layout_other <- filter(DF_other_3,(group=="Layouts"))
layout_other$prelim_name <- tolower(layout_other$prelim_name)
layout_other$prelim_name <- factor(layout_other$prelim_name,
levels=names(sort(table(layout_other$prelim_name))),
ordered=TRUE)
ggplot(filter(layout_other,prelim_name != "other (blank)")) +
geom_bar(aes(x=prelim_name),fill="purple4") +
#coord_flip() +
labs(#title="Other layout title",
x="Other layout algorithms",
y="Number of participants") +
scale_y_continuous(minor_breaks=NULL, breaks=c(0,1)) +
#scale_x_discrete(drop=FALSE) +
theme_bw() +
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size=.1, color="grey"),
plot.title = element_text(hjust = 0, size=22)
)
number_tools <- read.csv(textConnection("tool	subgroup	name
1	Analysis	Pajek
2	Analysis	UCINET
3	Analysis	Gephi
4	Analysis	Cytoscape
5	Analysis	VOSviewer
6	Analysis	R
7	Analysis	NodeXL
8	Analysis	NetworkX
9	Analysis	Graphviz
10	Analysis	Sci2
11	Analysis	NetworkWorkbench
12	Analysis	GUESS
13	Analysis	SigmaJS
14	Analysis	D3
15	Analysis	SoNIA
16	Analysis	ORA
17	Analysis	Tulip
18	Analysis	Other
19	Analysis	SAS
1	Visualization	Pajek
2	Visualization	UCINET
3	Visualization	Gephi
4	Visualization	Cytoscape
5	Visualization	VOSviewer
6	Visualization	R
7	Visualization	NodeXL
8	Visualization	NetworkX
9	Visualization	Graphviz
10	Visualization	Sci2
11	Visualization	NetworkWorkbench
12	Visualization	GUESS
13	Visualization	SigmaJS
14	Visualization	D3
15	Visualization	SoNIA
16	Visualization	ORA
17	Visualization	Tulip
18	Visualization	Other
19	Visualization	SAS"), sep="\t", stringsAsFactors=FALSE)
number_layouts <- read.csv(textConnection("layout	group	name
1	Layouts  Deterministic
2	Layouts  ForceAtlas
3	Layouts  ForceAtlas2
4	Layouts  FruchtermanReingold
5	Layouts  KamadaKawai
6	Layouts  GEM
7	Layouts  OpenOrd
8	Layouts  VxOrd
9	Layouts  LinLog
10	Layouts  Spring
11	Layouts  Circular
12	Layouts  Circos
13	Layouts  Matrix
14	Layouts  Hive
15	Layouts  Tube
16	Layouts  Radial
17	Layouts  Other"), sep="\t", stringsAsFactors=FALSE)
order_atools <- demo_cols[,c(1,13)]
order_atools_split <- separate(order_atools,DO.Q.Q6.DisplayOrderAnalysisTools,c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19"),sep="[|]")
order_atools_tall <- gather(order_atools_split, "order", "tool", 2:20)
order_atools_tall$order <- as.numeric(order_atools_tall$order)
number_tools$tool <- as.character(number_tools$tool)
order_atools_tall_join <- left_join(order_atools_tall, number_tools[number_tools$subgroup == "Analysis",])
order_vtools <- demo_cols[,c(1,14)]
order_vtools_split <- separate(order_vtools,DO.Q.Q22.DisplayOrderVisTools,c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19"),sep="[|]")
order_vtools_tall <- gather(order_vtools_split, "order", "tool", 2:20)
order_vtools_tall$order <- as.numeric(order_vtools_tall$order)
order_vtools_tall_join <- left_join(order_vtools_tall, number_tools[number_tools$subgroup == "Visualization",])
combined_tool_order <- bind_rows(order_atools_tall_join, order_vtools_tall_join)
combined_tool_order <- combined_tool_order[combined_tool_order$name != "Other",]
tools_with_order <- full_join(measures_by_user_atool, combined_tool_order[,c(1,2,4,5)])
order_layouts <- demo_cols[,c(1,15)]
order_layouts_split <- separate(order_layouts,DO.Q.Q9.DisplayOrderLayouts,c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17"),sep="[|]")
order_layouts_tall <- gather(order_layouts_split, "order", "layout", 2:18)
order_layouts_tall$order <- as.numeric(order_layouts_tall$order)
number_layouts$layout <- as.character(number_layouts$layout)
order_layouts_tall_join <- left_join(order_layouts_tall, number_layouts)
order_layouts_tall_join <- order_layouts_tall_join[order_layouts_tall_join$name != "Other",]
order_layouts_tall_join$group <- "Layouts"
order_layouts_tall_join$name <- factor(order_layouts_tall_join$name, levels=levels(measures_by_user_layout$name), ordered=TRUE)
layouts_with_order <- full_join(measures_by_user_layout, order_layouts_tall_join[,c(1,2,4,5)])
# now run a chi2 test to compare compiled_answer to order for each of the subgroups?
layout_answers <- measures_by_user_layout[,c(1,4,5)]
layout_answers$name <- paste("Layouts_",as.character(layout_answers$name),sep="")
layout_spread <- spread(layout_answers, name, compiled_answer)
tool_answers <- measures_by_user_atool[,c(1,3,4,5)]
tool_answers$new_name <- paste(tool_answers$subgroup,tool_answers$name,sep="_")
tool_spread <- spread(tool_answers[,c(1,4,5)], new_name, compiled_answer)
measure_answers <- measures_by_user_imp[,c(1,3,4,5)]
measure_answers$new_name <- paste(measure_answers$subgroup,measure_answers$name,sep="_")
measure_spread <- spread(measure_answers[,c(1,4,5)], new_name, compiled_answer)
pca_table <- full_join(demo_cols_subset, tool_spread)
pca_table <- full_join(pca_table, measure_spread)
pca_table <- full_join(pca_table, layout_spread)
write.csv(pca_table, file = "pca_table.csv",row.names=FALSE)
# Join adjusted demographic columns back to answer data.
measures_by_user_demo <- left_join(measures_by_user_imp,demo_for_analysis)
# sort by negative, based on Importance
measures_by_user_demo$name <- factor(measures_by_user_demo$name, levels=names(sort(table(measures_by_user_demo$name[measures_by_user_demo$neg == 1 & measures_by_user_demo$subgroup == "Important"]),decreasing=TRUE)))
# stacked bar, normal
measure_stacked <-
ggplot(measures_by_user_demo) +
geom_bar(aes(x=name, fill=compiled_answer), position = position_stack(reverse = TRUE)) +
facet_grid(.~subgroup) +
coord_flip() +
scale_fill_manual(values=c("snow4","snow3","sienna3","sienna1","skyblue2","skyblue4"),
name="")  +
labs(title="How important are these measures to your research?\nHow likely is it that you would be able to estimate these measures from a visualization?",
x="Network measure",
y="Number of participants") +
theme_bw(base_size = 16) +
#theme_bw() +
theme(legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
plot.title = element_text(hjust = 0)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
ggsave("measure_stacked.png", measure_stacked, width=13, height=9)
measure_stacked
# Join adjusted demographic columns back to answer data.
measures_by_user_demo <- left_join(measures_by_user_imp,demo_for_analysis)
# sort by negative, based on Importance
measures_by_user_demo$name <- factor(measures_by_user_demo$name, levels=names(sort(table(measures_by_user_demo$name[measures_by_user_demo$neg == 1 & measures_by_user_demo$subgroup == "Important"]),decreasing=TRUE)))
# stacked bar, normal
measure_stacked <-
ggplot(measures_by_user_demo) +
geom_bar(aes(x=name, fill=compiled_answer), position = position_stack(reverse = TRUE)) +
facet_grid(.~subgroup) +
coord_flip() +
#  scale_fill_manual(values=c("snow4","snow3","sienna3","sienna1","skyblue2","skyblue4"),
#                    name="")  +
scale_fill_manual(values=c("snow4","snow3","e66101","fdb863","b2abd2","5e3c99"),
name="")
labs(title="How important are these measures to your research?\nHow likely is it that you would be able to estimate these measures from a visualization?",
x="Network measure",
y="Number of participants") +
theme_bw(base_size = 16) +
#theme_bw() +
theme(legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
plot.title = element_text(hjust = 0)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
# Join adjusted demographic columns back to answer data.
measures_by_user_demo <- left_join(measures_by_user_imp,demo_for_analysis)
# sort by negative, based on Importance
measures_by_user_demo$name <- factor(measures_by_user_demo$name, levels=names(sort(table(measures_by_user_demo$name[measures_by_user_demo$neg == 1 & measures_by_user_demo$subgroup == "Important"]),decreasing=TRUE)))
# stacked bar, normal
measure_stacked <-
ggplot(measures_by_user_demo) +
geom_bar(aes(x=name, fill=compiled_answer), position = position_stack(reverse = TRUE)) +
facet_grid(.~subgroup) +
coord_flip() +
#  scale_fill_manual(values=c("snow4","snow3","sienna3","sienna1","skyblue2","skyblue4"),
#                    name="")  +
scale_fill_manual(values=c("snow4","snow3","e66101","fdb863","b2abd2","5e3c99"),
name="") +
labs(title="How important are these measures to your research?\nHow likely is it that you would be able to estimate these measures from a visualization?",
x="Network measure",
y="Number of participants") +
theme_bw(base_size = 16) +
#theme_bw() +
theme(legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
plot.title = element_text(hjust = 0)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
ggsave("measure_stacked.png", measure_stacked, width=13, height=9)
# Join adjusted demographic columns back to answer data.
measures_by_user_demo <- left_join(measures_by_user_imp,demo_for_analysis)
# sort by negative, based on Importance
measures_by_user_demo$name <- factor(measures_by_user_demo$name, levels=names(sort(table(measures_by_user_demo$name[measures_by_user_demo$neg == 1 & measures_by_user_demo$subgroup == "Important"]),decreasing=TRUE)))
# stacked bar, normal
measure_stacked <-
ggplot(measures_by_user_demo) +
geom_bar(aes(x=name, fill=compiled_answer), position = position_stack(reverse = TRUE)) +
facet_grid(.~subgroup) +
coord_flip() +
#  scale_fill_manual(values=c("snow4","snow3","sienna3","sienna1","skyblue2","skyblue4"),
#                    name="")  +
scale_fill_manual(values=c("snow4","snow3","#e66101","#fdb863","#b2abd2","#5e3c99"),
name="") +
labs(title="How important are these measures to your research?\nHow likely is it that you would be able to estimate these measures from a visualization?",
x="Network measure",
y="Number of participants") +
theme_bw(base_size = 16) +
#theme_bw() +
theme(legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
plot.title = element_text(hjust = 0)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
ggsave("measure_stacked.png", measure_stacked, width=13, height=9)
# Join adjusted demographic columns back to answer data.
measures_by_user_demo <- left_join(measures_by_user_imp,demo_for_analysis)
# sort by negative, based on Importance
measures_by_user_demo$name <- factor(measures_by_user_demo$name, levels=names(sort(table(measures_by_user_demo$name[measures_by_user_demo$neg == 1 & measures_by_user_demo$subgroup == "Important"]),decreasing=TRUE)))
# stacked bar, normal
measure_stacked <-
ggplot(measures_by_user_demo) +
geom_bar(aes(x=name, fill=compiled_answer), position = position_stack(reverse = TRUE)) +
facet_grid(.~subgroup) +
coord_flip() +
#  scale_fill_manual(values=c("snow4","snow3","sienna3","sienna1","skyblue2","skyblue4"),
#                    name="")  +
scale_fill_manual(values=c("gray50","gray75","#e66101","#fdb863","#b2abd2","#5e3c99"),
name="") +
labs(title="How important are these measures to your research?\nHow likely is it that you would be able to estimate these measures from a visualization?",
x="Network measure",
y="Number of participants") +
theme_bw(base_size = 16) +
#theme_bw() +
theme(legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
plot.title = element_text(hjust = 0)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
ggsave("measure_stacked.png", measure_stacked, width=13, height=9)
# Join adjusted demographic columns back to answer data.
measures_by_user_demo <- left_join(measures_by_user_imp,demo_for_analysis)
# sort by negative, based on Importance
measures_by_user_demo$name <- factor(measures_by_user_demo$name, levels=names(sort(table(measures_by_user_demo$name[measures_by_user_demo$neg == 1 & measures_by_user_demo$subgroup == "Important"]),decreasing=TRUE)))
# stacked bar, normal
measure_stacked <-
ggplot(measures_by_user_demo) +
geom_bar(aes(x=name, fill=compiled_answer), position = position_stack(reverse = TRUE)) +
facet_grid(.~subgroup) +
coord_flip() +
#  scale_fill_manual(values=c("snow4","snow3","sienna3","sienna1","skyblue2","skyblue4"),
#                    name="")  +
scale_fill_manual(values=c("gray58","gray67","#e66101","#fdb863","#b2abd2","#5e3c99"),
name="") +
labs(title="How important are these measures to your research?\nHow likely is it that you would be able to estimate these measures from a visualization?",
x="Network measure",
y="Number of participants") +
theme_bw(base_size = 16) +
#theme_bw() +
theme(legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
plot.title = element_text(hjust = 0)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
ggsave("measure_stacked.png", measure_stacked, width=13, height=9)
# Join adjusted demographic columns back to answer data.
measures_by_user_demo <- left_join(measures_by_user_imp,demo_for_analysis)
# sort by negative, based on Importance
measures_by_user_demo$name <- factor(measures_by_user_demo$name, levels=names(sort(table(measures_by_user_demo$name[measures_by_user_demo$neg == 1 & measures_by_user_demo$subgroup == "Important"]),decreasing=TRUE)))
# stacked bar, normal
measure_stacked <-
ggplot(measures_by_user_demo) +
geom_bar(aes(x=name, fill=compiled_answer), position = position_stack(reverse = TRUE)) +
facet_grid(.~subgroup) +
coord_flip() +
#  scale_fill_manual(values=c("snow4","snow3","sienna3","sienna1","skyblue2","skyblue4"),
#                    name="")  +
scale_fill_manual(values=c("gray58","gray71","#e66101","#fdb863","#b2abd2","#5e3c99"),
name="") +
labs(title="How important are these measures to your research?\nHow likely is it that you would be able to estimate these measures from a visualization?",
x="Network measure",
y="Number of participants") +
theme_bw(base_size = 16) +
#theme_bw() +
theme(legend.position="bottom",
panel.grid.major.y = element_blank(),
panel.grid.major.x = element_blank(),
plot.title = element_text(hjust = 0)) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
ggsave("measure_stacked.png", measure_stacked, width=13, height=9)
View(measures_by_user_demo %>% select(name, compiled_answer))
View(measures_by_user_demo %>% dplyr::select(name, compiled_answer))
View(measures_by_user_demo %>% group_by(name, subgroup, compiled_answer) %>% summarise(n=n()))
View(measures_by_user_demo %>% group_by(name, subgroup, compiled_answer) %>% summarise(n=n()) %>% spread(compiled_answer, n))
View(measures, total_pos, total_neg, level)
View(measures %>% dplyr::select(total_pos, total_neg, level))
View(measures %>% dplyr::select(name, total_pos, total_neg, level))
